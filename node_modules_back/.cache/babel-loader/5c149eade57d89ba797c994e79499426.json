{"ast":null,"code":"(function () {\n  \"use strict\";\n\n  function immutableInit(config) {\n    // https://github.com/facebook/react/blob/v15.0.1/src/isomorphic/classic/element/ReactElement.js#L21\n    var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element');\n    var REACT_ELEMENT_TYPE_FALLBACK = 0xeac7;\n    var globalConfig = {\n      use_static: false\n    };\n\n    if (isObject(config)) {\n      if (config.use_static !== undefined) {\n        globalConfig.use_static = Boolean(config.use_static);\n      }\n    }\n\n    function isObject(data) {\n      return typeof data === 'object' && !Array.isArray(data) && data !== null;\n    }\n\n    function instantiateEmptyObject(obj) {\n      var prototype = Object.getPrototypeOf(obj);\n\n      if (!prototype) {\n        return {};\n      } else {\n        return Object.create(prototype);\n      }\n    }\n\n    function addPropertyTo(target, methodName, value) {\n      Object.defineProperty(target, methodName, {\n        enumerable: false,\n        configurable: false,\n        writable: false,\n        value: value\n      });\n    }\n\n    function banProperty(target, methodName) {\n      addPropertyTo(target, methodName, function () {\n        throw new ImmutableError(\"The \" + methodName + \" method cannot be invoked on an Immutable data structure.\");\n      });\n    }\n\n    var immutabilityTag = \"__immutable_invariants_hold\";\n\n    function addImmutabilityTag(target) {\n      addPropertyTo(target, immutabilityTag, true);\n    }\n\n    function isImmutable(target) {\n      if (typeof target === \"object\") {\n        return target === null || Boolean(Object.getOwnPropertyDescriptor(target, immutabilityTag));\n      } else {\n        // In JavaScript, only objects are even potentially mutable.\n        // strings, numbers, null, and undefined are all naturally immutable.\n        return true;\n      }\n    }\n\n    function isEqual(a, b) {\n      // Avoid false positives due to (NaN !== NaN) evaluating to true\n      return a === b || a !== a && b !== b;\n    }\n\n    function isMergableObject(target) {\n      return target !== null && typeof target === \"object\" && !Array.isArray(target) && !(target instanceof Date);\n    }\n\n    var mutatingObjectMethods = [\"setPrototypeOf\"];\n    var nonMutatingObjectMethods = [\"keys\"];\n    var mutatingArrayMethods = mutatingObjectMethods.concat([\"push\", \"pop\", \"sort\", \"splice\", \"shift\", \"unshift\", \"reverse\"]);\n    var nonMutatingArrayMethods = nonMutatingObjectMethods.concat([\"map\", \"filter\", \"slice\", \"concat\", \"reduce\", \"reduceRight\"]);\n    var mutatingDateMethods = mutatingObjectMethods.concat([\"setDate\", \"setFullYear\", \"setHours\", \"setMilliseconds\", \"setMinutes\", \"setMonth\", \"setSeconds\", \"setTime\", \"setUTCDate\", \"setUTCFullYear\", \"setUTCHours\", \"setUTCMilliseconds\", \"setUTCMinutes\", \"setUTCMonth\", \"setUTCSeconds\", \"setYear\"]);\n\n    function ImmutableError(message) {\n      this.name = 'MyError';\n      this.message = message;\n      this.stack = new Error().stack;\n    }\n\n    ImmutableError.prototype = new Error();\n    ImmutableError.prototype.constructor = Error;\n\n    function makeImmutable(obj, bannedMethods) {\n      // Tag it so we can quickly tell it's immutable later.\n      addImmutabilityTag(obj);\n\n      if (\"development\" !== \"production\") {\n        // Make all mutating methods throw exceptions.\n        for (var index in bannedMethods) {\n          if (bannedMethods.hasOwnProperty(index)) {\n            banProperty(obj, bannedMethods[index]);\n          }\n        } // Freeze it and return it.\n\n\n        Object.freeze(obj);\n      }\n\n      return obj;\n    }\n\n    function makeMethodReturnImmutable(obj, methodName) {\n      var currentMethod = obj[methodName];\n      addPropertyTo(obj, methodName, function () {\n        return Immutable(currentMethod.apply(obj, arguments));\n      });\n    }\n\n    function arraySet(idx, value, config) {\n      var deep = config && config.deep;\n\n      if (idx in this) {\n        if (deep && this[idx] !== value && isMergableObject(value) && isMergableObject(this[idx])) {\n          value = Immutable.merge(this[idx], value, {\n            deep: true,\n            mode: 'replace'\n          });\n        }\n\n        if (isEqual(this[idx], value)) {\n          return this;\n        }\n      }\n\n      var mutable = asMutableArray.call(this);\n      mutable[idx] = Immutable(value);\n      return makeImmutableArray(mutable);\n    }\n\n    var immutableEmptyArray = Immutable([]);\n\n    function arraySetIn(pth, value, config) {\n      var head = pth[0];\n\n      if (pth.length === 1) {\n        return arraySet.call(this, head, value, config);\n      } else {\n        var tail = pth.slice(1);\n        var thisHead = this[head];\n        var newValue;\n\n        if (typeof thisHead === \"object\" && thisHead !== null) {\n          // Might (validly) be object or array\n          newValue = Immutable.setIn(thisHead, tail, value);\n        } else {\n          var nextHead = tail[0]; // If the next path part is a number, then we are setting into an array, else an object.\n\n          if (nextHead !== '' && isFinite(nextHead)) {\n            newValue = arraySetIn.call(immutableEmptyArray, tail, value);\n          } else {\n            newValue = objectSetIn.call(immutableEmptyObject, tail, value);\n          }\n        }\n\n        if (head in this && thisHead === newValue) {\n          return this;\n        }\n\n        var mutable = asMutableArray.call(this);\n        mutable[head] = newValue;\n        return makeImmutableArray(mutable);\n      }\n    }\n\n    function makeImmutableArray(array) {\n      // Don't change their implementations, but wrap these functions to make sure\n      // they always return an immutable value.\n      for (var index in nonMutatingArrayMethods) {\n        if (nonMutatingArrayMethods.hasOwnProperty(index)) {\n          var methodName = nonMutatingArrayMethods[index];\n          makeMethodReturnImmutable(array, methodName);\n        }\n      }\n\n      if (!globalConfig.use_static) {\n        addPropertyTo(array, \"flatMap\", flatMap);\n        addPropertyTo(array, \"asObject\", asObject);\n        addPropertyTo(array, \"asMutable\", asMutableArray);\n        addPropertyTo(array, \"set\", arraySet);\n        addPropertyTo(array, \"setIn\", arraySetIn);\n        addPropertyTo(array, \"update\", update);\n        addPropertyTo(array, \"updateIn\", updateIn);\n        addPropertyTo(array, \"getIn\", getIn);\n      }\n\n      for (var i = 0, length = array.length; i < length; i++) {\n        array[i] = Immutable(array[i]);\n      }\n\n      return makeImmutable(array, mutatingArrayMethods);\n    }\n\n    function makeImmutableDate(date) {\n      if (!globalConfig.use_static) {\n        addPropertyTo(date, \"asMutable\", asMutableDate);\n      }\n\n      return makeImmutable(date, mutatingDateMethods);\n    }\n\n    function asMutableDate() {\n      return new Date(this.getTime());\n    }\n    /**\n     * Effectively performs a map() over the elements in the array, using the\n     * provided iterator, except that whenever the iterator returns an array, that\n     * array's elements are added to the final result instead of the array itself.\n     *\n     * @param {function} iterator - The iterator function that will be invoked on each element in the array. It will receive three arguments: the current value, the current index, and the current object.\n     */\n\n\n    function flatMap(iterator) {\n      // Calling .flatMap() with no arguments is a no-op. Don't bother cloning.\n      if (arguments.length === 0) {\n        return this;\n      }\n\n      var result = [],\n          length = this.length,\n          index;\n\n      for (index = 0; index < length; index++) {\n        var iteratorResult = iterator(this[index], index, this);\n\n        if (Array.isArray(iteratorResult)) {\n          // Concatenate Array results into the return value we're building up.\n          result.push.apply(result, iteratorResult);\n        } else {\n          // Handle non-Array results the same way map() does.\n          result.push(iteratorResult);\n        }\n      }\n\n      return makeImmutableArray(result);\n    }\n    /**\n     * Returns an Immutable copy of the object without the given keys included.\n     *\n     * @param {array} keysToRemove - A list of strings representing the keys to exclude in the return value. Instead of providing a single array, this method can also be called by passing multiple strings as separate arguments.\n     */\n\n\n    function without(remove) {\n      // Calling .without() with no arguments is a no-op. Don't bother cloning.\n      if (typeof remove === \"undefined\" && arguments.length === 0) {\n        return this;\n      }\n\n      if (typeof remove !== \"function\") {\n        // If we weren't given an array, use the arguments list.\n        var keysToRemoveArray = Array.isArray(remove) ? remove.slice() : Array.prototype.slice.call(arguments); // Convert numeric keys to strings since that's how they'll\n        // come from the enumeration of the object.\n\n        keysToRemoveArray.forEach(function (el, idx, arr) {\n          if (typeof el === \"number\") {\n            arr[idx] = el.toString();\n          }\n        });\n\n        remove = function remove(val, key) {\n          return keysToRemoveArray.indexOf(key) !== -1;\n        };\n      }\n\n      var result = instantiateEmptyObject(this);\n\n      for (var key in this) {\n        if (this.hasOwnProperty(key) && remove(this[key], key) === false) {\n          result[key] = this[key];\n        }\n      }\n\n      return makeImmutableObject(result);\n    }\n\n    function asMutableArray(opts) {\n      var result = [],\n          i,\n          length;\n\n      if (opts && opts.deep) {\n        for (i = 0, length = this.length; i < length; i++) {\n          result.push(asDeepMutable(this[i]));\n        }\n      } else {\n        for (i = 0, length = this.length; i < length; i++) {\n          result.push(this[i]);\n        }\n      }\n\n      return result;\n    }\n    /**\n     * Effectively performs a [map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) over the elements in the array, expecting that the iterator function\n     * will return an array of two elements - the first representing a key, the other\n     * a value. Then returns an Immutable Object constructed of those keys and values.\n     *\n     * @param {function} iterator - A function which should return an array of two elements - the first representing the desired key, the other the desired value.\n     */\n\n\n    function asObject(iterator) {\n      // If no iterator was provided, assume the identity function\n      // (suggesting this array is already a list of key/value pairs.)\n      if (typeof iterator !== \"function\") {\n        iterator = function iterator(value) {\n          return value;\n        };\n      }\n\n      var result = {},\n          length = this.length,\n          index;\n\n      for (index = 0; index < length; index++) {\n        var pair = iterator(this[index], index, this),\n            key = pair[0],\n            value = pair[1];\n        result[key] = value;\n      }\n\n      return makeImmutableObject(result);\n    }\n\n    function asDeepMutable(obj) {\n      if (!obj || typeof obj !== 'object' || !Object.getOwnPropertyDescriptor(obj, immutabilityTag) || obj instanceof Date) {\n        return obj;\n      }\n\n      return Immutable.asMutable(obj, {\n        deep: true\n      });\n    }\n\n    function quickCopy(src, dest) {\n      for (var key in src) {\n        if (Object.getOwnPropertyDescriptor(src, key)) {\n          dest[key] = src[key];\n        }\n      }\n\n      return dest;\n    }\n    /**\n     * Returns an Immutable Object containing the properties and values of both\n     * this object and the provided object, prioritizing the provided object's\n     * values whenever the same key is present in both objects.\n     *\n     * @param {object} other - The other object to merge. Multiple objects can be passed as an array. In such a case, the later an object appears in that list, the higher its priority.\n     * @param {object} config - Optional config object that contains settings. Supported settings are: {deep: true} for deep merge and {merger: mergerFunc} where mergerFunc is a function\n     *                          that takes a property from both objects. If anything is returned it overrides the normal merge behaviour.\n     */\n\n\n    function merge(other, config) {\n      // Calling .merge() with no arguments is a no-op. Don't bother cloning.\n      if (arguments.length === 0) {\n        return this;\n      }\n\n      if (other === null || typeof other !== \"object\") {\n        throw new TypeError(\"Immutable#merge can only be invoked with objects or arrays, not \" + JSON.stringify(other));\n      }\n\n      var receivedArray = Array.isArray(other),\n          deep = config && config.deep,\n          mode = config && config.mode || 'merge',\n          merger = config && config.merger,\n          result; // Use the given key to extract a value from the given object, then place\n      // that value in the result object under the same key. If that resulted\n      // in a change from this object's value at that key, set anyChanges = true.\n\n      function addToResult(currentObj, otherObj, key) {\n        var immutableValue = Immutable(otherObj[key]);\n        var mergerResult = merger && merger(currentObj[key], immutableValue, config);\n        var currentValue = currentObj[key];\n\n        if (result !== undefined || mergerResult !== undefined || !currentObj.hasOwnProperty(key) || !isEqual(immutableValue, currentValue)) {\n          var newValue;\n\n          if (mergerResult !== undefined) {\n            newValue = mergerResult;\n          } else if (deep && isMergableObject(currentValue) && isMergableObject(immutableValue)) {\n            newValue = Immutable.merge(currentValue, immutableValue, config);\n          } else {\n            newValue = immutableValue;\n          }\n\n          if (!isEqual(currentValue, newValue) || !currentObj.hasOwnProperty(key)) {\n            if (result === undefined) {\n              // Make a shallow clone of the current object.\n              result = quickCopy(currentObj, instantiateEmptyObject(currentObj));\n            }\n\n            result[key] = newValue;\n          }\n        }\n      }\n\n      function clearDroppedKeys(currentObj, otherObj) {\n        for (var key in currentObj) {\n          if (!otherObj.hasOwnProperty(key)) {\n            if (result === undefined) {\n              // Make a shallow clone of the current object.\n              result = quickCopy(currentObj, instantiateEmptyObject(currentObj));\n            }\n\n            delete result[key];\n          }\n        }\n      }\n\n      var key; // Achieve prioritization by overriding previous values that get in the way.\n\n      if (!receivedArray) {\n        // The most common use case: just merge one object into the existing one.\n        for (key in other) {\n          if (Object.getOwnPropertyDescriptor(other, key)) {\n            addToResult(this, other, key);\n          }\n        }\n\n        if (mode === 'replace') {\n          clearDroppedKeys(this, other);\n        }\n      } else {\n        // We also accept an Array\n        for (var index = 0, length = other.length; index < length; index++) {\n          var otherFromArray = other[index];\n\n          for (key in otherFromArray) {\n            if (otherFromArray.hasOwnProperty(key)) {\n              addToResult(result !== undefined ? result : this, otherFromArray, key);\n            }\n          }\n        }\n      }\n\n      if (result === undefined) {\n        return this;\n      } else {\n        return makeImmutableObject(result);\n      }\n    }\n\n    function objectReplace(value, config) {\n      var deep = config && config.deep; // Calling .replace() with no arguments is a no-op. Don't bother cloning.\n\n      if (arguments.length === 0) {\n        return this;\n      }\n\n      if (value === null || typeof value !== \"object\") {\n        throw new TypeError(\"Immutable#replace can only be invoked with objects or arrays, not \" + JSON.stringify(value));\n      }\n\n      return Immutable.merge(this, value, {\n        deep: deep,\n        mode: 'replace'\n      });\n    }\n\n    var immutableEmptyObject = Immutable({});\n\n    function objectSetIn(path, value, config) {\n      if (!Array.isArray(path) || path.length === 0) {\n        throw new TypeError(\"The first argument to Immutable#setIn must be an array containing at least one \\\"key\\\" string.\");\n      }\n\n      var head = path[0];\n\n      if (path.length === 1) {\n        return objectSet.call(this, head, value, config);\n      }\n\n      var tail = path.slice(1);\n      var newValue;\n      var thisHead = this[head];\n\n      if (this.hasOwnProperty(head) && typeof thisHead === \"object\" && thisHead !== null) {\n        // Might (validly) be object or array\n        newValue = Immutable.setIn(thisHead, tail, value);\n      } else {\n        newValue = objectSetIn.call(immutableEmptyObject, tail, value);\n      }\n\n      if (this.hasOwnProperty(head) && thisHead === newValue) {\n        return this;\n      }\n\n      var mutable = quickCopy(this, instantiateEmptyObject(this));\n      mutable[head] = newValue;\n      return makeImmutableObject(mutable);\n    }\n\n    function objectSet(property, value, config) {\n      var deep = config && config.deep;\n\n      if (this.hasOwnProperty(property)) {\n        if (deep && this[property] !== value && isMergableObject(value) && isMergableObject(this[property])) {\n          value = Immutable.merge(this[property], value, {\n            deep: true,\n            mode: 'replace'\n          });\n        }\n\n        if (isEqual(this[property], value)) {\n          return this;\n        }\n      }\n\n      var mutable = quickCopy(this, instantiateEmptyObject(this));\n      mutable[property] = Immutable(value);\n      return makeImmutableObject(mutable);\n    }\n\n    function update(property, updater) {\n      var restArgs = Array.prototype.slice.call(arguments, 2);\n      var initialVal = this[property];\n      return Immutable.set(this, property, updater.apply(initialVal, [initialVal].concat(restArgs)));\n    }\n\n    function getInPath(obj, path) {\n      /*jshint eqnull:true */\n      for (var i = 0, l = path.length; obj != null && i < l; i++) {\n        obj = obj[path[i]];\n      }\n\n      return i && i == l ? obj : undefined;\n    }\n\n    function updateIn(path, updater) {\n      var restArgs = Array.prototype.slice.call(arguments, 2);\n      var initialVal = getInPath(this, path);\n      return Immutable.setIn(this, path, updater.apply(initialVal, [initialVal].concat(restArgs)));\n    }\n\n    function getIn(path, defaultValue) {\n      var value = getInPath(this, path);\n      return value === undefined ? defaultValue : value;\n    }\n\n    function asMutableObject(opts) {\n      var result = instantiateEmptyObject(this),\n          key;\n\n      if (opts && opts.deep) {\n        for (key in this) {\n          if (this.hasOwnProperty(key)) {\n            result[key] = asDeepMutable(this[key]);\n          }\n        }\n      } else {\n        for (key in this) {\n          if (this.hasOwnProperty(key)) {\n            result[key] = this[key];\n          }\n        }\n      }\n\n      return result;\n    } // Creates plain object to be used for cloning\n\n\n    function instantiatePlainObject() {\n      return {};\n    } // Finalizes an object with immutable methods, freezes it, and returns it.\n\n\n    function makeImmutableObject(obj) {\n      if (!globalConfig.use_static) {\n        addPropertyTo(obj, \"merge\", merge);\n        addPropertyTo(obj, \"replace\", objectReplace);\n        addPropertyTo(obj, \"without\", without);\n        addPropertyTo(obj, \"asMutable\", asMutableObject);\n        addPropertyTo(obj, \"set\", objectSet);\n        addPropertyTo(obj, \"setIn\", objectSetIn);\n        addPropertyTo(obj, \"update\", update);\n        addPropertyTo(obj, \"updateIn\", updateIn);\n        addPropertyTo(obj, \"getIn\", getIn);\n      }\n\n      return makeImmutable(obj, mutatingObjectMethods);\n    } // Returns true if object is a valid react element\n    // https://github.com/facebook/react/blob/v15.0.1/src/isomorphic/classic/element/ReactElement.js#L326\n\n\n    function isReactElement(obj) {\n      return typeof obj === 'object' && obj !== null && (obj.$$typeof === REACT_ELEMENT_TYPE_FALLBACK || obj.$$typeof === REACT_ELEMENT_TYPE);\n    }\n\n    function isFileObject(obj) {\n      return typeof File !== 'undefined' && obj instanceof File;\n    }\n\n    function isBlobObject(obj) {\n      return typeof Blob !== 'undefined' && obj instanceof Blob;\n    }\n\n    function isPromise(obj) {\n      return typeof obj === 'object' && typeof obj.then === 'function';\n    }\n\n    function isError(obj) {\n      return obj instanceof Error;\n    }\n\n    function Immutable(obj, options, stackRemaining) {\n      if (isImmutable(obj) || isReactElement(obj) || isFileObject(obj) || isBlobObject(obj) || isError(obj)) {\n        return obj;\n      } else if (isPromise(obj)) {\n        return obj.then(Immutable);\n      } else if (Array.isArray(obj)) {\n        return makeImmutableArray(obj.slice());\n      } else if (obj instanceof Date) {\n        return makeImmutableDate(new Date(obj.getTime()));\n      } else {\n        // Don't freeze the object we were given; make a clone and use that.\n        var prototype = options && options.prototype;\n        var instantiateEmptyObject = !prototype || prototype === Object.prototype ? instantiatePlainObject : function () {\n          return Object.create(prototype);\n        };\n        var clone = instantiateEmptyObject();\n\n        if (\"development\" !== \"production\") {\n          /*jshint eqnull:true */\n          if (stackRemaining == null) {\n            stackRemaining = 64;\n          }\n\n          if (stackRemaining <= 0) {\n            throw new ImmutableError(\"Attempt to construct Immutable from a deeply nested object was detected.\" + \" Have you tried to wrap an object with circular references (e.g. React element)?\" + \" See https://github.com/rtfeldman/seamless-immutable/wiki/Deeply-nested-object-was-detected for details.\");\n          }\n\n          stackRemaining -= 1;\n        }\n\n        for (var key in obj) {\n          if (Object.getOwnPropertyDescriptor(obj, key)) {\n            clone[key] = Immutable(obj[key], undefined, stackRemaining);\n          }\n        }\n\n        return makeImmutableObject(clone);\n      }\n    } // Wrapper to allow the use of object methods as static methods of Immutable.\n\n\n    function toStatic(fn) {\n      function staticWrapper() {\n        var args = [].slice.call(arguments);\n        var self = args.shift();\n        return fn.apply(self, args);\n      }\n\n      return staticWrapper;\n    } // Wrapper to allow the use of object methods as static methods of Immutable.\n    // with the additional condition of choosing which function to call depending\n    // if argument is an array or an object.\n\n\n    function toStaticObjectOrArray(fnObject, fnArray) {\n      function staticWrapper() {\n        var args = [].slice.call(arguments);\n        var self = args.shift();\n\n        if (Array.isArray(self)) {\n          return fnArray.apply(self, args);\n        } else {\n          return fnObject.apply(self, args);\n        }\n      }\n\n      return staticWrapper;\n    } // Wrapper to allow the use of object methods as static methods of Immutable.\n    // with the additional condition of choosing which function to call depending\n    // if argument is an array or an object or a date.\n\n\n    function toStaticObjectOrDateOrArray(fnObject, fnArray, fnDate) {\n      function staticWrapper() {\n        var args = [].slice.call(arguments);\n        var self = args.shift();\n\n        if (Array.isArray(self)) {\n          return fnArray.apply(self, args);\n        } else if (self instanceof Date) {\n          return fnDate.apply(self, args);\n        } else {\n          return fnObject.apply(self, args);\n        }\n      }\n\n      return staticWrapper;\n    } // Export the library\n\n\n    Immutable.from = Immutable;\n    Immutable.isImmutable = isImmutable;\n    Immutable.ImmutableError = ImmutableError;\n    Immutable.merge = toStatic(merge);\n    Immutable.replace = toStatic(objectReplace);\n    Immutable.without = toStatic(without);\n    Immutable.asMutable = toStaticObjectOrDateOrArray(asMutableObject, asMutableArray, asMutableDate);\n    Immutable.set = toStaticObjectOrArray(objectSet, arraySet);\n    Immutable.setIn = toStaticObjectOrArray(objectSetIn, arraySetIn);\n    Immutable.update = toStatic(update);\n    Immutable.updateIn = toStatic(updateIn);\n    Immutable.getIn = toStatic(getIn);\n    Immutable.flatMap = toStatic(flatMap);\n    Immutable.asObject = toStatic(asObject);\n\n    if (!globalConfig.use_static) {\n      Immutable.static = immutableInit({\n        use_static: true\n      });\n    }\n\n    Object.freeze(Immutable);\n    return Immutable;\n  }\n\n  var Immutable = immutableInit();\n  /* istanbul ignore if */\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return Immutable;\n    });\n  } else if (typeof module === \"object\") {\n    module.exports = Immutable;\n  } else if (typeof exports === \"object\") {\n    exports.Immutable = Immutable;\n  } else if (typeof window === \"object\") {\n    window.Immutable = Immutable;\n  } else if (typeof global === \"object\") {\n    global.Immutable = Immutable;\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}