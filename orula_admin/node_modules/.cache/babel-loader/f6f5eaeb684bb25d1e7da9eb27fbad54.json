{"ast":null,"code":"import _classCallCheck from \"/Applications/React/BootstrapBay_datta-able-free-reactjs-admin-dashboard-template-BFD950F/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/React/BootstrapBay_datta-able-free-reactjs-admin-dashboard-template-BFD950F/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Applications/React/BootstrapBay_datta-able-free-reactjs-admin-dashboard-template-BFD950F/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Applications/React/BootstrapBay_datta-able-free-reactjs-admin-dashboard-template-BFD950F/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Applications/React/BootstrapBay_datta-able-free-reactjs-admin-dashboard-template-BFD950F/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Applications/React/BootstrapBay_datta-able-free-reactjs-admin-dashboard-template-BFD950F/src/App/layout/AdminLayout/index.js\";\nimport React, { Component, Suspense } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Fullscreen from \"react-full-screen\";\nimport windowSize from 'react-window-size';\nimport Navigation from './Navigation';\nimport NavBar from './NavBar';\nimport Breadcrumb from './Breadcrumb';\nimport Loader from \"../Loader\";\nimport routes from \"../../../routes\";\nimport Aux from \"../../../hoc/_Aux\";\nimport * as actionTypes from \"../../../store/actions\";\nimport './app.scss';\n\nvar AdminLayout =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdminLayout, _Component);\n\n  function AdminLayout() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AdminLayout);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AdminLayout)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.fullScreenExitHandler = function () {\n      if (!document.fullscreenElement && !document.webkitIsFullScreen && !document.mozFullScreen && !document.msFullscreenElement) {\n        _this.props.onFullScreenExit();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(AdminLayout, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (this.props.windowWidth > 992 && this.props.windowWidth <= 1024 && this.props.layout !== 'horizontal') {\n        this.props.onComponentWillMount();\n      }\n    }\n  }, {\n    key: \"mobileOutClickHandler\",\n    value: function mobileOutClickHandler() {\n      if (this.props.windowWidth < 992 && this.props.collapseMenu) {\n        this.props.onComponentWillMount();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      /* full screen exit call */\n      document.addEventListener('fullscreenchange', this.fullScreenExitHandler);\n      document.addEventListener('webkitfullscreenchange', this.fullScreenExitHandler);\n      document.addEventListener('mozfullscreenchange', this.fullScreenExitHandler);\n      document.addEventListener('MSFullscreenChange', this.fullScreenExitHandler);\n      var menu = routes.map(function (route, index) {\n        return route.component ? React.createElement(Route, {\n          key: index,\n          path: route.path,\n          exact: route.exact,\n          name: route.name,\n          render: function render(props) {\n            return React.createElement(route.component, Object.assign({}, props, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 53\n              },\n              __self: this\n            }));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }) : null;\n      });\n      return React.createElement(Aux, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Fullscreen, {\n        enabled: this.props.isFullScreen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Navigation, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(NavBar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"pcoded-main-container\",\n        onClick: function onClick() {\n          return _this2.mobileOutClickHandler;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pcoded-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pcoded-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pcoded-inner-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Breadcrumb, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"main-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"page-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Suspense, {\n        fallback: React.createElement(Loader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, menu, React.createElement(Redirect, {\n        from: \"/\",\n        to: this.props.defaultPath,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      })))))))))));\n    }\n  }]);\n\n  return AdminLayout;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    defaultPath: state.defaultPath,\n    isFullScreen: state.isFullScreen,\n    collapseMenu: state.collapseMenu,\n    configBlock: state.configBlock,\n    layout: state.layout\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onFullScreenExit: function onFullScreenExit() {\n      return dispatch({\n        type: actionTypes.FULL_SCREEN_EXIT\n      });\n    },\n    onComponentWillMount: function onComponentWillMount() {\n      return dispatch({\n        type: actionTypes.COLLAPSE_MENU\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(windowSize(AdminLayout));","map":{"version":3,"sources":["/Applications/React/BootstrapBay_datta-able-free-reactjs-admin-dashboard-template-BFD950F/src/App/layout/AdminLayout/index.js"],"names":["React","Component","Suspense","Route","Switch","Redirect","connect","Fullscreen","windowSize","Navigation","NavBar","Breadcrumb","Loader","routes","Aux","actionTypes","AdminLayout","fullScreenExitHandler","document","fullscreenElement","webkitIsFullScreen","mozFullScreen","msFullscreenElement","props","onFullScreenExit","windowWidth","layout","onComponentWillMount","collapseMenu","addEventListener","menu","map","route","index","component","path","exact","name","isFullScreen","mobileOutClickHandler","defaultPath","mapStateToProps","state","configBlock","mapDispatchToProps","dispatch","type","FULL_SCREEN_EXIT","COLLAPSE_MENU"],"mappings":"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","sourcesContent":["import React, { Component, Suspense } from 'react';\r\nimport {Route, Switch, Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport Fullscreen from \"react-full-screen\";\r\nimport windowSize from 'react-window-size';\r\n\r\nimport Navigation from './Navigation';\r\nimport NavBar from './NavBar';\r\nimport Breadcrumb from './Breadcrumb';\r\nimport Loader from \"../Loader\";\r\nimport routes from \"../../../routes\";\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport * as actionTypes from \"../../../store/actions\";\r\n\r\nimport './app.scss';\r\n\r\nclass AdminLayout extends Component {\r\n\r\n    fullScreenExitHandler = () => {\r\n        if (!document.fullscreenElement && !document.webkitIsFullScreen && !document.mozFullScreen && !document.msFullscreenElement) {\r\n            this.props.onFullScreenExit();\r\n        }\r\n    };\r\n\r\n    componentWillMount() {\r\n        if (this.props.windowWidth > 992 && this.props.windowWidth <= 1024 && this.props.layout !== 'horizontal') {\r\n            this.props.onComponentWillMount();\r\n        }\r\n    }\r\n\r\n    mobileOutClickHandler() {\r\n        if (this.props.windowWidth < 992 && this.props.collapseMenu) {\r\n            this.props.onComponentWillMount();\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        /* full screen exit call */\r\n        document.addEventListener('fullscreenchange', this.fullScreenExitHandler);\r\n        document.addEventListener('webkitfullscreenchange', this.fullScreenExitHandler);\r\n        document.addEventListener('mozfullscreenchange', this.fullScreenExitHandler);\r\n        document.addEventListener('MSFullscreenChange', this.fullScreenExitHandler);\r\n\r\n        const menu = routes.map((route, index) => {\r\n            return (route.component) ? (\r\n                <Route\r\n                    key={index}\r\n                    path={route.path}\r\n                    exact={route.exact}\r\n                    name={route.name}\r\n                    render={props => (\r\n                        <route.component {...props} />\r\n                    )} />\r\n            ) : (null);\r\n        });\r\n\r\n        return (\r\n            <Aux>\r\n                <Fullscreen enabled={this.props.isFullScreen}>\r\n                    <Navigation />\r\n                    <NavBar />\r\n                    <div className=\"pcoded-main-container\" onClick={() => this.mobileOutClickHandler}>\r\n                        <div className=\"pcoded-wrapper\">\r\n                            <div className=\"pcoded-content\">\r\n                                <div className=\"pcoded-inner-content\">\r\n                                    <Breadcrumb />\r\n                                    <div className=\"main-body\">\r\n                                        <div className=\"page-wrapper\">\r\n                                            <Suspense fallback={<Loader/>}>\r\n                                                <Switch>\r\n                                                    {menu}\r\n                                                    <Redirect from=\"/\" to={this.props.defaultPath} />\r\n                                                </Switch>\r\n                                            </Suspense>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Fullscreen>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        defaultPath: state.defaultPath,\r\n        isFullScreen: state.isFullScreen,\r\n        collapseMenu: state.collapseMenu,\r\n        configBlock: state.configBlock,\r\n        layout: state.layout\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFullScreenExit: () => dispatch({type: actionTypes.FULL_SCREEN_EXIT}),\r\n        onComponentWillMount: () => dispatch({type: actionTypes.COLLAPSE_MENU})\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (windowSize(AdminLayout));"]},"metadata":{},"sourceType":"module"}